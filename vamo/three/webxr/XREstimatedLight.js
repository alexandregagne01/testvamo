import{DirectionalLight,Group,LightProbe,WebGLCubeRenderTarget}from"../three.module.js";class SessionLightProbe{constructor(t,i,e,r,n){this.xrLight=t,this.renderer=i,this.lightProbe=e,this.xrWebGLBinding=null,this.estimationStartCallback=n,this.frameCallback=this.onXRFrame.bind(this);e=i.xr.getSession();if(r&&"XRWebGLBinding"in window){var n=new WebGLCubeRenderTarget(16),s=(t.environment=n.texture,i.getContext());switch(e.preferredReflectionFormat){case"srgba8":s.getExtension("EXT_sRGB");break;case"rgba16f":s.getExtension("OES_texture_half_float")}this.xrWebGLBinding=new XRWebGLBinding(e,s),this.lightProbe.addEventListener("reflectionchange",()=>{this.updateReflection()})}e.requestAnimationFrame(this.frameCallback)}updateReflection(){var t,i=this.renderer.properties.get(this.xrLight.environment);i&&(t=this.xrWebGLBinding.getReflectionCubeMap(this.lightProbe))&&(i.__webglTexture=t,this.xrLight.environment.needsPMREMUpdate=!0)}onXRFrame(t,i){var e;this.xrLight&&(i.session.requestAnimationFrame(this.frameCallback),(i=i.getLightEstimate(this.lightProbe))&&(this.xrLight.lightProbe.sh.fromArray(i.sphericalHarmonicsCoefficients),this.xrLight.lightProbe.intensity=1,e=Math.max(1,Math.max(i.primaryLightIntensity.x,Math.max(i.primaryLightIntensity.y,i.primaryLightIntensity.z))),this.xrLight.directionalLight.color.setRGB(i.primaryLightIntensity.x/e,i.primaryLightIntensity.y/e,i.primaryLightIntensity.z/e),this.xrLight.directionalLight.intensity=e,this.xrLight.directionalLight.position.copy(i.primaryLightDirection),this.estimationStartCallback&&(this.estimationStartCallback(),this.estimationStartCallback=null)))}dispose(){this.xrLight=null,this.renderer=null,this.lightProbe=null,this.xrWebGLBinding=null}}class XREstimatedLight extends Group{constructor(i,e=!0){super(),this.lightProbe=new LightProbe,this.lightProbe.intensity=0,this.add(this.lightProbe),this.directionalLight=new DirectionalLight,this.directionalLight.intensity=0,this.add(this.directionalLight);let r=this.environment=null,n=!1;i.xr.addEventListener("sessionstart",()=>{var t=i.xr.getSession();"requestLightProbe"in t&&t.requestLightProbe({reflectionFormat:t.preferredReflectionFormat}).then(t=>{r=new SessionLightProbe(this,i,t,e,()=>{n=!0,this.dispatchEvent({type:"estimationstart"})})})}),i.xr.addEventListener("sessionend",()=>{r&&(r.dispose(),r=null),n&&this.dispatchEvent({type:"estimationend"})}),this.dispose=()=>{r&&(r.dispose(),r=null),this.remove(this.lightProbe),this.lightProbe=null,this.remove(this.directionalLight),this.directionalLight=null,this.environment=null}}}export{XREstimatedLight};