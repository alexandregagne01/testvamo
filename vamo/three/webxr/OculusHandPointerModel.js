import*as THREE from"../three.module.js";const PINCH_MAX=.05,PINCH_THRESHOLD=.02,PINCH_MIN=.01,POINTER_ADVANCE_MAX=.02,POINTER_OPACITY_MAX=1,POINTER_OPACITY_MIN=.4,POINTER_FRONT_RADIUS=.002,POINTER_REAR_RADIUS=.01,POINTER_REAR_RADIUS_MIN=.003,POINTER_LENGTH=.035,POINTER_SEGMENTS=16,POINTER_RINGS=12,POINTER_HEMISPHERE_ANGLE=110,YAXIS=new THREE.Vector3(0,1,0),ZAXIS=new THREE.Vector3(0,0,1),CURSOR_RADIUS=.02,CURSOR_MAX_DISTANCE=1.5;class OculusHandPointerModel extends THREE.Object3D{constructor(t,e){super(),this.hand=t,this.controller=e,this.motionController=null,this.envMap=null,this.mesh=null,this.pointerGeometry=null,this.pointerMesh=null,this.pointerObject=null,this.pinched=!1,this.attached=!1,this.cursorObject=null,this.raycaster=null,t.addEventListener("connected",t=>{t=t.data;t.hand&&(this.visible=!0,this.xrInputSource=t,null===this.pointerObject&&this.createPointer())})}_drawVerticesRing(e,t,i){var r=t.clone();for(let t=0;t<POINTER_SEGMENTS;t++){r.applyAxisAngle(ZAXIS,2*Math.PI/POINTER_SEGMENTS);var E=i*POINTER_SEGMENTS+t;e[3*E]=r.x,e[3*E+1]=r.y,e[3*E+2]=r.z}}_updatePointerVertices(t){var e=this.pointerGeometry.attributes.position.array,i=new THREE.Vector3(POINTER_FRONT_RADIUS,0,-1*(POINTER_LENGTH-t)),r=(this._drawVerticesRing(e,i,0),new THREE.Vector3(Math.sin(Math.PI*POINTER_HEMISPHERE_ANGLE/180)*t,Math.cos(Math.PI*POINTER_HEMISPHERE_ANGLE/180)*t,0));for(let t=0;t<POINTER_RINGS;t++)this._drawVerticesRing(e,r,t+1),r.applyAxisAngle(YAXIS,Math.PI*POINTER_HEMISPHERE_ANGLE/180/(-2*POINTER_RINGS));var i=POINTER_SEGMENTS*(1+POINTER_RINGS),E=POINTER_SEGMENTS*(1+POINTER_RINGS)+1,s=new THREE.Vector3(0,0,-1*(POINTER_LENGTH-t)),i=(e[3*i]=s.x,e[3*i+1]=s.y,e[3*i+2]=s.z,new THREE.Vector3(0,0,t));e[3*E]=i.x,e[3*E+1]=i.y,e[3*E+2]=i.z,this.pointerGeometry.setAttribute("position",new THREE.Float32BufferAttribute(e,3))}createPointer(){let t,e;var i=new Array(3*((POINTER_RINGS+1)*POINTER_SEGMENTS+2)).fill(0),r=[];for(this.pointerGeometry=new THREE.BufferGeometry,this.pointerGeometry.setAttribute("position",new THREE.Float32BufferAttribute(i,3)),this._updatePointerVertices(POINTER_REAR_RADIUS),t=0;t<POINTER_RINGS;t++){for(e=0;e<POINTER_SEGMENTS-1;e++)r.push(t*POINTER_SEGMENTS+e,t*POINTER_SEGMENTS+e+1,(t+1)*POINTER_SEGMENTS+e),r.push(t*POINTER_SEGMENTS+e+1,(t+1)*POINTER_SEGMENTS+e+1,(t+1)*POINTER_SEGMENTS+e);r.push((t+1)*POINTER_SEGMENTS-1,t*POINTER_SEGMENTS,(t+2)*POINTER_SEGMENTS-1),r.push(t*POINTER_SEGMENTS,(t+1)*POINTER_SEGMENTS,(t+2)*POINTER_SEGMENTS-1)}var E=POINTER_SEGMENTS*(1+POINTER_RINGS),s=POINTER_SEGMENTS*(1+POINTER_RINGS)+1;for(t=0;t<POINTER_SEGMENTS-1;t++)r.push(E,t+1,t),r.push(s,t+POINTER_SEGMENTS*POINTER_RINGS,t+POINTER_SEGMENTS*POINTER_RINGS+1);r.push(E,0,POINTER_SEGMENTS-1),r.push(s,POINTER_SEGMENTS*(POINTER_RINGS+1)-1,POINTER_SEGMENTS*POINTER_RINGS);var i=new THREE.MeshBasicMaterial,i=(i.transparent=!0,i.opacity=POINTER_OPACITY_MIN,this.pointerGeometry.setIndex(r),this.pointerMesh=new THREE.Mesh(this.pointerGeometry,i),this.pointerMesh.position.set(0,0,-1*POINTER_REAR_RADIUS),this.pointerObject=new THREE.Object3D,this.pointerObject.add(this.pointerMesh),this.raycaster=new THREE.Raycaster,new THREE.SphereGeometry(CURSOR_RADIUS,10,10)),R=new THREE.MeshBasicMaterial;R.transparent=!0,R.opacity=POINTER_OPACITY_MIN,this.cursorObject=new THREE.Mesh(i,R),this.pointerObject.add(this.cursorObject),this.add(this.pointerObject)}_updateRaycaster(){var t,e;this.raycaster&&(t=this.pointerObject.matrixWorld,(e=new THREE.Matrix4).identity().extractRotation(t),this.raycaster.ray.origin.setFromMatrixPosition(t),this.raycaster.ray.direction.set(0,0,-1).applyMatrix4(e))}_updatePointer(){this.pointerObject.visible=this.controller.visible;var t=this.hand.joints["index-finger-tip"],e=this.hand.joints["thumb-tip"],i=t.position.distanceTo(e.position),t=t.position.clone().add(e.position).multiplyScalar(.5),e=(this.pointerObject.position.copy(t),this.pointerObject.quaternion.copy(this.controller.quaternion),this.pinched=i<=PINCH_THRESHOLD,(i-PINCH_MIN)/(PINCH_MAX-PINCH_MIN)),t=(i-PINCH_MIN)/(PINCH_THRESHOLD-PINCH_MIN);1<e?(this._updatePointerVertices(POINTER_REAR_RADIUS),this.pointerMesh.position.set(0,0,-1*POINTER_REAR_RADIUS),this.pointerMesh.material.opacity=POINTER_OPACITY_MIN):0<e?(i=(POINTER_REAR_RADIUS-POINTER_REAR_RADIUS_MIN)*e+POINTER_REAR_RADIUS_MIN,this._updatePointerVertices(i),t<1?(this.pointerMesh.position.set(0,0,-1*i-(1-t)*POINTER_ADVANCE_MAX),this.pointerMesh.material.opacity=POINTER_OPACITY_MIN+(1-t)*(POINTER_OPACITY_MAX-POINTER_OPACITY_MIN)):(this.pointerMesh.position.set(0,0,-1*i),this.pointerMesh.material.opacity=POINTER_OPACITY_MIN)):(this._updatePointerVertices(POINTER_REAR_RADIUS_MIN),this.pointerMesh.position.set(0,0,-1*POINTER_REAR_RADIUS_MIN-POINTER_ADVANCE_MAX),this.pointerMesh.material.opacity=POINTER_OPACITY_MAX),this.cursorObject.material.opacity=this.pointerMesh.material.opacity}updateMatrixWorld(t){super.updateMatrixWorld(t),this.pointerGeometry&&(this._updatePointer(),this._updateRaycaster())}isPinched(){return this.pinched}setAttached(t){this.attached=t}isAttached(){return this.attached}intersectObject(t,e=!0){if(this.raycaster)return this.raycaster.intersectObject(t,e)}intersectObjects(t,e=!0){if(this.raycaster)return this.raycaster.intersectObjects(t,e)}checkIntersections(t,e=!1){this.raycaster&&!this.attached&&(t=this.raycaster.intersectObjects(t,e),e=new THREE.Vector3(0,0,-1),0<t.length?(t=t[0].distance,this.cursorObject.position.copy(e.multiplyScalar(t))):this.cursorObject.position.copy(e.multiplyScalar(CURSOR_MAX_DISTANCE)))}setCursor(t){var e=new THREE.Vector3(0,0,-1);this.raycaster&&!this.attached&&this.cursorObject.position.copy(e.multiplyScalar(t))}}export{OculusHandPointerModel};